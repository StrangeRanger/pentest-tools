#!/usr/bin/env bash
#
# Perform a network scan to discover hosts on the network.
#
# Version: v1.0.1
# License: MIT License
#          Copyright (c) 2024 Hunter T. (StrangeRanger)
#
########################################################################################
#### [ Script Wide Variables ]


yellow="$(printf '\033[1;33m')"
green="$(printf '\033[0;32m')"
blue="$(printf '\033[0;34m')"
cyan="$(printf '\033[0;36m')"
red="$(printf '\033[1;31m')"
nc="$(printf '\033[0m')"

lower_bound=""
upper_bound=""


#### End of [ Script Wide Variables ]
########################################################################################
#### [ Functions ]


####
# Display the usage of the script.
#
# Arguments:
#   $1 - Optional flag to increase verbosity of the usage message.
####
usage() {
    if [[ $1 == "-v" ]]; then
        echo "Perform a network scan to discover hosts on the network."
    fi

    echo ""
    echo "Usage: ${0##*/} <Address 1> <Address 2>"
}

####
# Verify if the provided IP address is valid.
#
# Arguments:
#   $1 - IP address to verify
####
verify_valid_ip() {
    local ip="$1"
    local valid_ip_regex="^((25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|1?[0-9][0-9]?)$"

    if [[ ! $ip =~ $valid_ip_regex ]]; then
        echo -e "${red}ERROR:${nc} Invalid IP address: $1"
        exit 1
    fi
}

####
# Properly set the lower and upper bounds of the IP addresses.
#
# Arguments:
#   $1 - IP address 1.
#   $2 - IP address 2.
####
check_lower_upper_bounds() {
    if [[ $(ip_to_int "$1") -gt $(ip_to_int "$2") ]]; then
        lower_bound="$2"
        upper_bound="$1"
    else
        lower_bound="$1"
        upper_bound="$2"
    fi
}

####
# Convert an IP address to an integer.
#
# Arguments:
#   $1 - IP address to convert.
####
ip_to_int() {
    local IFS='.'
    read -r octet1 octet2 octet3 octet4 <<< "$1"
    echo $(((octet1 << 24) + (octet2 << 16) + (octet3 << 8) + octet4))
}

####
# Convert an integer to an IP address.
#
# Arguments:
#   $1 - Integer to convert.
####
int_to_ip() {
    local ip_int="$1"
    echo "$((ip_int >> 24 & 255)).$((ip_int >> 16 & 255)).$((ip_int >> 8 & 255)).$((ip_int & 255))"
}


#### End of [ Functions ]
########################################################################################
#### [ Verification ]


if [[ $# -eq 0 ]]; then
    usage "-v"
    exit 0
fi

if [[ $# -ne 2 ]]; then
    echo -e "${red}ERROR:${nc} Invalid number of arguments."
    usage
    exit 1
fi

verify_valid_ip "$1"
verify_valid_ip "$2"
check_lower_upper_bounds "$1" "$2"


#### End of [ Verification ]
########################################################################################
#### [ Main ]


echo "${cyan}==>${nc} Performing network scan to discover hosts on the network..."

starting_point=$(ip_to_int "$lower_bound")
ending_point=$(ip_to_int "$upper_bound")
total_ips=$((ending_point - starting_point + 1))
iteration_count=0
ip_addr_count=0

for ((ip_int = starting_point; ip_int <= ending_point; ip_int++)); do
    ip=$(int_to_ip "$ip_int")

    (( iteration_count += 1 ))
    echo -en "\r\033[K"
    echo -ne "${blue}==>${nc} Scanning IP address: $ip ($iteration_count/$total_ips)\r"

    output=$(ping -c 1 -W 1 "$ip" 2>&1)
    result=$(grep "1 received" <<< "$output" || grep "1 packets received" <<< "$output")

    if [[ -n $result ]]; then
        echo -en "\r\033[K"
        echo -e "${green}==>${nc} Found valid IP address: $ip"
        (( ip_addr_count += 1 ))
    fi
done

echo ""
echo "${cyan}==>${nc} Network scan complete."

if [[ $ip_addr_count -eq 0 ]]; then
    echo "${yellow}==>${nc} No valid IP addresses found."
else
    echo "${green}==>${nc} Found $ip_addr_count valid IP addresses."
fi


#### End of [ Main ]
########################################################################################
